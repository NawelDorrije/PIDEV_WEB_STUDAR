{% extends 'base.html.twig' %}

{% block title %}Edit Logement{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {# Leaflet CSS #}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    {# FontAwesome for icons #}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <style>
        * {
            box-sizing: border-box;
        }

        #preview-slider {
            display: none;
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            background-color: #f9f9f9;
            max-width: 600px;
            margin: auto;
            overflow-x: hidden;
        }

        #preview-slider.visible {
            display: block;
        }

        .delete-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #ff4444;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s, transform 0.3s;
            z-index: 10;
            padding: 0;
        }

        .delete-btn:hover {
            background-color: #e63939;
            transform: scale(1.1);
        }

        .drag-area {
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            transition: background-color 0.3s, border-color 0.3s;
        }

        .drag-area:hover {
            background-color: #f0f4ff;
            border-color: #999;
        }

        .drag-area .paperclip {
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 24px;
            color: #555;
        }

        .slider-css-target {
            overflow-x: hidden;
            max-width: 600px;
            margin: auto;
        }

        .slider-css-target ul {
            margin: 1rem 0.5rem;
            padding: 0;
            list-style-type: none;
            display: flex;
            gap: 0.5rem;
            overflow-x: auto;
            white-space: nowrap;
            justify-content: center;
        }

        .slider-css-target ul li {
            position: relative;
        }

        .slider-css-target ul li a {
            display: block;
        }

        .slider-css-target ul li img {
            display: block;
            max-width: 100%;
            width: 60px;
            height: 60px;
            object-fit: cover;
            border: 2px solid white;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
            border-radius: 8px;
        }

        .slider-css-target-images {
            display: flex;
            width: 400%;
            will-change: transform;
            transition: transform 0.4s ease-in-out;
        }

        .slider-css-target-images .description {
            background-color: #dbdbdb;
            flex: 0 1 100%;
            overflow: hidden;
        }

        .slider-css-target-images img {
            display: block;
            width: 100%;
            height: auto;
            max-height: 300px;
            object-fit: cover;
        }

        .error-message {
            color: #ff4444;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {# Leaflet JS #}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        let map;
        let marker;
        let imageCount = 0;
        let allPhotos = [];
        let selectedFiles = []; // Store File objects for new uploads
        let existingPhotos = []; // Store existing photos with IDs and URLs
        let deletedPhotoIds = []; // Track IDs of existing photos to delete

        // Initialize existing photos from server
        {% for photo in logement.imageLogements %}
            existingPhotos.push({
                id: '{{ photo.id }}',
                url: '{{ asset('Uploads/photos/' ~ photo.url) }}'
            });
        {% endfor %}
        allPhotos = existingPhotos.map(photo => photo.url);

        function previewImages(event) {
            const files = event.target.files;
            if (!files || files.length === 0) return;

            Array.from(files).forEach(file => {
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                if (!allowedTypes.includes(file.type)) {
                    alert('Only JPEG, PNG, and GIF files are allowed.');
                    return;
                }
                if (file.size > 5 * 1024 * 1024) {
                    alert('File is too large. Maximum size is 5MB.');
                    return;
                }

                selectedFiles.push(file);

                const reader = new FileReader();
                reader.onload = function (e) {
                    allPhotos.push(e.target.result);
                    renderPhotos();
                };
                reader.readAsDataURL(file);
            });

            updateFileInput();
        }

        function updateFileInput() {
            const fileInput = document.getElementById("file-input");
            const dataTransfer = new DataTransfer();
            selectedFiles.forEach(file => dataTransfer.items.add(file));
            fileInput.files = dataTransfer.files;
        }

        function renderPhotos() {
            const sliderContainer = document.querySelector(".slider-css-target");
            const thumbnailsList = sliderContainer.querySelector("ul");
            const imagesContainer = sliderContainer.querySelector(".slider-css-target-images");

            thumbnailsList.innerHTML = '';
            imagesContainer.innerHTML = '';
            imageCount = 0;

            allPhotos.forEach((photoSrc, index) => {
                imageCount++;
                const imageId = `image_${imageCount}`;

                const li = document.createElement("li");
                const a = document.createElement("a");
                a.href = `#${imageId}`;
                a.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    window.history.pushState({}, '', `#${imageId}`);
                    updateSliderTransform(imageId);
                });
                const thumbImg = document.createElement("img");
                thumbImg.src = photoSrc;
                thumbImg.alt = `Photo ${imageCount}`;
                a.appendChild(thumbImg);

                const deleteBtn = document.createElement("button");
                deleteBtn.innerHTML = "âœ–";
                deleteBtn.className = "delete-btn";
                deleteBtn.setAttribute("aria-label", "Remove photo");
                deleteBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    const existingPhotoIndex = existingPhotos.findIndex(p => p.url === photoSrc);
                    if (existingPhotoIndex !== -1) {
                        const existingPhoto = existingPhotos[existingPhotoIndex];
                        if (!deletedPhotoIds.includes(existingPhoto.id)) {
                            deletedPhotoIds.push(existingPhoto.id);
                        }
                        existingPhotos.splice(existingPhotoIndex, 1);
                    } else {
                        const selectedFileIndex = allPhotos.indexOf(photoSrc);
                        if (selectedFileIndex !== -1 && selectedFileIndex < selectedFiles.length) {
                            selectedFiles.splice(selectedFileIndex, 1);
                        }
                    }
                    allPhotos.splice(index, 1);
                    renderPhotos();
                    updateFileInput();
                    updateDeletedPhotosInput();
                    updatePreviewVisibility();
                });

                li.appendChild(a);
                li.appendChild(deleteBtn);
                thumbnailsList.appendChild(li);

                const descriptionDiv = document.createElement("div");
                descriptionDiv.className = "description";
                descriptionDiv.id = imageId;
                const largeImg = document.createElement("img");
                largeImg.src = photoSrc;
                largeImg.alt = `Photo ${imageCount}`;
                descriptionDiv.appendChild(largeImg);
                imagesContainer.appendChild(descriptionDiv);
            });

            updateSliderWidth();
            updatePreviewVisibility();
        }

        function updateDeletedPhotosInput() {
            let input = document.getElementById('deleted-photos');
            if (!input) {
                input = document.createElement('input');
                input.type = 'hidden';
                input.id = 'deleted-photos';
                input.name = 'deleted_photos';
                document.getElementById('contact-form').appendChild(input);
            }
            input.value = deletedPhotoIds.join(',');
        }

        function handleDrop(event) {
            event.preventDefault();
            const input = document.getElementById("file-input");
            input.files = event.dataTransfer.files;
            previewImages({ target: input });
        }

        function openFileInput() {
            const fileInput = document.getElementById("file-input");
            fileInput.click();
        }

        function updateSliderWidth() {
            const imagesContainer = document.querySelector(".slider-css-target-images");
            const imageItems = imagesContainer.querySelectorAll(".description");
            const count = imageItems.length;

            imagesContainer.style.width = `${count * 100}%`;

            if (count === 1 && window.location.hash !== '#image_1') {
                window.history.pushState({}, '', '#image_1');
                updateSliderTransform('image_1');
            } else if (count === 0) {
                window.history.pushState({}, '', '#');
            }
        }

        function updateSliderTransform(targetId) {
            const imagesContainer = document.querySelector(".slider-css-target-images");
            const imageItems = imagesContainer.querySelectorAll(".description");
            const count = imageItems.length;

            let targetIndex = 0;
            imageItems.forEach((item, index) => {
                if (item.id === targetId) {
                    targetIndex = index;
                }
            });

            const percentage = (targetIndex / (count || 1)) * 100;
            imagesContainer.style.transform = `translate3d(-${percentage}%, 0, 0)`;
        }

        function updatePreviewVisibility() {
            const previewContainer = document.getElementById("preview-slider");
            const sliderContainer = document.querySelector(".slider-css-target");
            const thumbnailsList = sliderContainer.querySelector("ul");

            if (thumbnailsList.children.length > 0) {
                previewContainer.classList.add("visible");
            } else {
                previewContainer.classList.remove("visible");
                const fileInput = document.getElementById("file-input");
                fileInput.value = '';
                selectedFiles = [];
            }
        }

        window.addEventListener('popstate', () => {
            const hash = window.location.hash.replace('#', '');
            if (hash && hash.startsWith('image_')) {
                updateSliderTransform(hash);
            }
        });

        function initMap() {
            const initialLat = {{ logement.localisation ? logement.localisation.y|default(48.8566) : 48.8566 }};
            const initialLng = {{ logement.localisation ? logement.localisation.x|default(2.3522) : 2.3522 }};
        
            map = L.map('map').setView([initialLat, initialLng], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Â© OpenStreetMap contributors'
            }).addTo(map);

            marker = L.marker([initialLat, initialLng], {
                draggable: true
            }).addTo(map);

            map.on('click', function(e) {
                marker.setLatLng(e.latlng);
                updateFields(e.latlng, true);
            });

            marker.on('dragend', function(e) {
                updateFields(marker.getLatLng(), true);
            });

            // Call updateFields immediately to populate the address field
            updateFields({ lat: initialLat, lng: initialLng }, true);
        }

        async function updateFields(latlng, fromMap = false) {
            const latField = document.getElementById('latitude');
            const lonField = document.getElementById('longitude');
            const addressField = document.querySelector('input[name="logement[address]"]');
            const errorMessage = document.getElementById('address-error');

            if (!latField || !lonField || !addressField) {
                console.error('One or more input fields not found in DOM:', {
                    latField: !!latField,
                    lonField: !!lonField,
                    addressField: !!addressField
                });
                return;
            }

            latField.value = latlng.lat;
            lonField.value = latlng.lng;

            // Use the existing address if available and not updating from map click/drag
            const existingAddress = '{{ logement.address ?? '' }}';
            if (!fromMap && existingAddress) {
                addressField.value = existingAddress;
                if (errorMessage) errorMessage.style.display = 'none';
                return;
            }

            // Otherwise, fetch the address via reverse geocoding
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${latlng.lat}&lon=${latlng.lng}&format=json&addressdetails=1`, {
                    headers: {
                        'User-Agent': 'MySymfonyApp/1.0 (contact@myapp.com)'
                    }
                });
                const data = await response.json();
                if (data && data.display_name) {
                    addressField.value = data.display_name;
                    if (errorMessage) errorMessage.style.display = 'none';
                } else {
                    addressField.value = 'Address not found';
                    if (errorMessage) {
                        errorMessage.textContent = 'Address not found';
                        errorMessage.style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error fetching address:', error);
                addressField.value = 'Error retrieving address';
                if (errorMessage) {
                    errorMessage.textContent = 'Error retrieving address';
                    errorMessage.style.display = 'block';
                }
            }
        }

        async function geocodeAddress(address) {
            const errorMessage = document.getElementById('address-error');
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(address)}&format=json&limit=1`, {
                    headers: {
                        'User-Agent': 'MySymfonyApp/1.0 (contact@myapp.com)'
                    }
                });
                const data = await response.json();
                if (data && data.length > 0) {
                    const lat = parseFloat(data[0].lat);
                    const lon = parseFloat(data[0].lon);
                    const latlng = { lat, lng: lon };
                    
                    if (!marker) {
                        marker = L.marker(latlng, {
                            draggable: true
                        }).addTo(map);
                        marker.on('dragend', function(e) {
                            updateFields(marker.getLatLng(), true);
                        });
                    } else {
                        marker.setLatLng(latlng);
                    }
                    
                    map.setView(latlng, 13);
                    updateFields(latlng, false);
                    if (errorMessage) errorMessage.style.display = 'none';
                } else {
                    if (errorMessage) {
                        errorMessage.textContent = 'Address not found';
                        errorMessage.style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error geocoding address:', error);
                if (errorMessage) {
                    errorMessage.textContent = 'Error geocoding address';
                    errorMessage.style.display = 'block';
                }
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            initMap();
            const initialHash = window.location.hash.replace('#', '');
            if (initialHash && initialHash.startsWith('image_')) {
                updateSliderTransform(initialHash);
            }
            if (allPhotos.length > 0) {
                renderPhotos();
            }

            // Add event listener for address input
            const addressField = document.querySelector('input[name="logement[address]"]');
            addressField.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const address = this.value.trim();
                    if (address) {
                        geocodeAddress(address);
                    }
                }
            });
        });
    </script>
{% endblock %}

{% block body %}
    <div class="contact-page section">
        <div class="container">
            <div class="row row-page">
                <div class="col-lg-12">
                    <h1 class="center">Modifier ce Logement</h1>
                </div>
                <div class="col-lg-12 right-column">
                    {{ form_start(form, {'attr': {'id': 'contact-form', 'enctype': 'multipart/form-data'}}) }}
                    {# Hidden input for deleted photos #}
                    <input type="hidden" id="deleted-photos" name="deleted_photos" value="">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="col-lg-12">
                                {{ form_widget(form.nbrChambre, {
                                    'attr': {
                                        'placeholder': 'Number of Rooms',
                                        'class': 'form-control' ~ (form.nbrChambre.vars.errors|length > 0 ? ' is-invalid' : ''),
                                        'required': 'required'
                                    }
                                }) }}
                                {{ form_errors(form.nbrChambre) }}
                            </div>
                            <div class="col-lg-12">
                                {{ form_widget(form.prix, {
                                    'attr': {
                                        'placeholder': 'Price (â‚¬)',
                                        'class': 'form-control' ~ (form.prix.vars.errors|length > 0 ? ' is-invalid' : ''),
                                        'required': 'required'
                                    }
                                }) }}
                                {{ form_errors(form.prix) }}
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="col-lg-12">
                                {{ form_widget(form.description, {
                                    'attr': {
                                        'placeholder': 'Description',
                                        'class': 'form-control' ~ (form.description.vars.errors|length > 0 ? ' is-invalid' : ''),
                                        'rows': 5,
                                        'required': 'required'
                                    }
                                }) }}
                                {{ form_errors(form.description) }}
                            </div>
                            <div class="col-lg-12">
                                {{ form_widget(form.type, {
                                    'attr': {
                                        'placeholder': 'Property Type',
                                        'class': 'form-control' ~ (form.type.vars.errors|length > 0 ? ' is-invalid' : ''),
                                        'required': 'required'
                                    }
                                }) }}
                                {{ form_errors(form.type) }}
                            </div>
                        </div>
                        <div style="width: 100%; max-width: 100%; padding: 15px;">
                            <div
                                class="drag-area"
                                onclick="openFileInput()"
                                ondragover="event.preventDefault(); this.style.backgroundColor='#f0f4ff'; this.style.borderColor='#999';"
                                ondragleave="this.style.backgroundColor='#f9f9fc'; this.style.borderColor='#bbb';"
                                ondrop="handleDrop(event)"
                                style="
                                    height: 250px;
                                    border: 2px dashed #bbb;
                                    border-radius: 10px;
                                    background-color: #f9f9fc;
                                    cursor: pointer;
                                    transition: all 0.3s ease;
                                    text-align: center;
                                "
                            >
                                <i class="fas fa-cloud-upload-alt fa-3x" style="color: #8ca0b3; margin-bottom: 10px;"></i>
                                <h5 style="font-weight: bold; color: #333; margin-bottom: 5px;">Parcourir les fichiers</h5>
                                <p style="color: #6c757d; font-size: 14px; margin: 0;">Glissez et dÃ©posez les photos ici</p>
                                <i class="fas fa-paperclip paperclip"></i>
                                <input type="file" id="file-input" name="photos[]" multiple accept="image/*" style="display: none;" onchange="previewImages(event)">
                            </div>
                        </div>
                        <div id="preview-slider">
                            <div class="slider-css-target">
                                <ul>
                                    <!-- Thumbnails will be dynamically added here -->
                                </ul>
                                <div class="slider-css-target-images">
                                    <!-- Large images will be dynamically added here -->
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            {{ form_widget(form.address, {
                                'attr': {
                                    'placeholder': 'Address (auto-filled)',
                                    'class': 'form-control',
                                    'id': 'logement_address',
                                }
                            }) }}
                            {{ form_errors(form.address) }}
                            <div id="address-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-12">
                            {{ form_widget(form.latitude, {
                                'attr': {
                                    'id': 'latitude',
                                    'class': 'd-none'
                                }
                            }) }}
                            {{ form_errors(form.latitude) }}
                        </div>
                        <div class="col-lg-12">
                            {{ form_widget(form.longitude, {
                                'attr': {
                                    'id': 'longitude',
                                    'class': 'd-none'
                                }
                            }) }}
                            {{ form_errors(form.longitude) }}
                        </div>
                        <div id="map" style="height: 400px; width: 100%; margin: 20px 0; border-radius: 8px;"></div>
                        <div class="col-lg-12" style="margin-top: 20px;">
                            <button type="submit" class="orange-button">Update</button>
                        </div>
                    </div>
                    {{ form_end(form) }}
                    <div class="center" style="margin-top: 20px;">
                        <a href="{{ path('app_logement_index') }}" class="btn btn-secondary">
                            <i class="fa fa-arrow-left"></i> Back to List
                        </a>
                    </div>
                    {{ include('logement/_delete_form.html.twig') }}
                </div>
            </div>
        </div>
    </div>
{% endblock %}