{% extends 'base.html.twig' %}

{% block title %}Logement{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    {# FontAwesome for icons #}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
{# <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script> #}

    <script>
        let map;
        let logementMarker;
        let routeLayer = null; // To store the polyline

        function initMap() {
            const initialLat = {{ logement.localisation ? logement.localisation.y|default(48.8566) : 48.8566 }};
            const initialLng = {{ logement.localisation ? logement.localisation.x|default(2.3522) : 2.3522 }};
            
            map = L.map('map').setView([initialLat, initialLng], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // Fixed marker for logement
            logementMarker = L.marker([initialLat, initialLng], {
                draggable: false
            }).addTo(map);
        }

        // Haversine formula to calculate straight-line distance (in km)
        function haversineDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Earth's radius in km
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                      Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // Distance in km
        }

        // Estimate travel times based on straight-line distance
        function estimateTravelTimes(distance) {
            const walkingSpeed = 5; // km/h
            const drivingSpeed = 50; // km/h
            const walkingTime = (distance / walkingSpeed) * 60; // minutes
            const drivingTime = (distance / drivingSpeed) * 60; // minutes
            return {
                walking: Math.round(walkingTime),
                driving: Math.round(drivingTime)
            };
        }

        async function geocodeAddress(address) {
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(address)}&format=json&limit=1`, {
                    headers: {
                        'User-Agent': 'MySymfonyApp/1.0 (contact@myapp.com)'
                    }
                });
                const data = await response.json();
                console.log('Geocoding response:', data); // Debug
                if (data && data.length > 0) {
                    return {
                        lat: parseFloat(data[0].lat),
                        lng: parseFloat(data[0].lon)
                    };
                }
                return null;
            } catch (error) {
                console.error('Error geocoding address:', error);
                return null;
            }
        }

        let newAddressMarker = null; // Store marker for new address

        async function calculateDistanceAndRoute(newAddress) {
            const errorMessage = document.getElementById('address-error');
            const resultContainer = document.getElementById('travel-info');
            const initialLat = {{ logement.localisation ? logement.localisation.y|default(48.8566) : 48.8566 }};
            const initialLng = {{ logement.localisation ? logement.localisation.x|default(2.3522) : 2.3522 }};
        
            // Clear previous results and markers
            resultContainer.style.display = 'none';
            if (routeLayer) {
                map.removeLayer(routeLayer);
                routeLayer = null;
            }
            if (newAddressMarker) {
                map.removeLayer(newAddressMarker);
                newAddressMarker = null;
            }
            if (errorMessage) errorMessage.style.display = 'none';
        
            const newCoords = await geocodeAddress(newAddress);
            if (!newCoords) {
                console.log('Geocoding failed for address:', newAddress);
                if (errorMessage) {
                    errorMessage.textContent = 'Adresse non trouvée';
                    errorMessage.style.display = 'block';
                }
                return;
            }
        
            // Add marker for new address
            newAddressMarker = L.marker([newCoords.lat, newCoords.lng], {
                draggable: false,
                icon: L.icon({
                    iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41]
                })
            }).addTo(map).bindPopup('Nouvelle adresse').openPopup();
        
            // Calculate straight-line distance
            const distance = haversineDistance(initialLat, initialLng, newCoords.lat, newCoords.lng).toFixed(2);
            console.log('Calculated distance:', distance, 'km');
        
            // Estimate travel times
            const times = estimateTravelTimes(distance);
            console.log('Estimated times:', times);
        
            // Draw straight-line route
            routeLayer = L.polyline([
                [initialLat, initialLng],
                [newCoords.lat, newCoords.lng]
            ], {
                color: '#ff0000',
                weight: 6,
                opacity: 0.9
            }).addTo(map);
        
            // Fit map to show both points
            map.fitBounds([
                [initialLat, initialLng],
                [newCoords.lat, newCoords.lng]
            ], {
                padding: [50, 50]
            });
        
            // Update UI with distance and times
            resultContainer.innerHTML = `
                <p><i class="fas fa-car"></i> Voiture: ${distance} km, ${times.driving} min</p>
                <p><i class="fas fa-walking"></i> À pied: ${distance} km, ${times.walking} min</p>
            `;
            resultContainer.style.display = 'block';
        }

        // Function to check if a reclamation is within 24 hours of creation
        function isWithin24Hours(timestamp) {
            const creationDate = new Date(timestamp);
            const now = new Date();
            const diffInMs = now - creationDate;
            const diffInHours = diffInMs / (1000 * 60 * 60);
            return diffInHours <= 24;
        }

        document.addEventListener('DOMContentLoaded', function() {
            initMap();

            // Address input handler
            const addressInput = document.getElementById('new-address');
            if (addressInput) {
                addressInput.addEventListener('keypress', function(e) {
                    console.log('Key pressed:', e.key); // Debug
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        const address = this.value.trim();
                        console.log('Address entered:', address); // Debug
                        if (address) {
                            calculateDistanceAndRoute(address);
                        } else {
                            console.log('Empty address input'); // Debug
                        }
                    }
                });
            } else {
                console.error('New address input not found'); // Debug
            }

            // Initialize slider functionality
            const sliderImages = document.querySelector('.slider-css-target-images');
            const thumbnails = document.querySelectorAll('.slider-css-target ul li a');
            
            function updateSliderPosition(targetId) {
                const targetIndex = Array.from(sliderImages.children).findIndex(
                    child => child.id === targetId
                );
                
                if (targetIndex >= 0) {
                    const percentage = targetIndex * 100;
                    sliderImages.style.transform = `translate3d(-${percentage}%, 0, 0)`;
                }
            }

            thumbnails.forEach(thumb => {
                thumb.addEventListener('click', (e) => {
                    e.preventDefault();
                    const targetId = e.currentTarget.getAttribute('href').substring(1);
                    window.history.pushState({}, '', `#${targetId}`);
                    updateSliderPosition(targetId);
                });
            });

            const initialHash = window.location.hash.substring(1);
            if (initialHash) {
                updateSliderPosition(initialHash);
            }

            window.addEventListener('popstate', () => {
                const hash = window.location.hash.substring(1);
                updateSliderPosition(hash);
            });

            // Handle reclamation form submission (Add Reclamation)
           // Handle reclamation form submission (Add Reclamation)
const submitButton = document.getElementById('submit-reclamation');
const reclamationForm = document.getElementById('add-reclamation-form');
const errorMessageDiv = document.getElementById('form-error');
const addModal = document.getElementById('addReclamationModal');

if (submitButton && reclamationForm) {
    reclamationForm.addEventListener('submit', function(e) {
        e.preventDefault();
    });

    submitButton.addEventListener('click', function() {
        console.log('Submit reclamation button clicked'); // Debug
        const title = document.getElementById('reclamation-title').value.trim();
        const description = document.getElementById('reclamation-description').value.trim();

        if (!title || !description) {
            errorMessageDiv.textContent = 'Le titre et la description sont requis.';
            errorMessageDiv.style.display = 'block';
            return;
        }

        errorMessageDiv.style.display = 'none';
        const formData = new FormData(reclamationForm);

        fetch(reclamationForm.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            console.log('Reclamation submission response:', data); // Debug
            if (data.success) {
                const modalInstance = bootstrap.Modal.getInstance(addModal);
                if (modalInstance) {
                    modalInstance.hide();
                } else {
                    console.error('Modal instance not found');
                }
                reclamationForm.reset();
                setTimeout(() => {
                    window.location.reload(); // Reload to show new reclamation
                }, 300);
            } else {
                errorMessageDiv.textContent = data.error || 'Une erreur est survenue.';
                errorMessageDiv.style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Error submitting reclamation:', error);
            errorMessageDiv.textContent = 'Une erreur est survenue lors de l\'envoi.';
            errorMessageDiv.style.display = 'block';
        });
    });
} else {
    console.error('Reclamation form or submit button not found');
}
            // Disable "Modifier" buttons for reclamations older than 24 hours
            const modifyButtons = document.querySelectorAll('.modify-reclamation-btn');
            modifyButtons.forEach(button => {
                const timestamp = button.dataset.timestamp;
                if (!isWithin24Hours(timestamp)) {
                    button.disabled = true;
                    button.title = "Modification non autorisée après 24 heures.";
                }

                button.addEventListener('click', function() {
                    const reclamationId = this.dataset.reclamationId;
                    const title = this.dataset.title;
                    const description = this.dataset.description;

                    // Populate the modify modal with reclamation data
                    const modifyForm = document.getElementById('modify-reclamation-form');
                    modifyForm.action = '{{ path('app_reclamation_modify', {'id': 'REPLACEMENT_ID'}) }}'.replace('REPLACEMENT_ID', reclamationId);
                    document.getElementById('modify-reclamation-title').value = title;
                    document.getElementById('modify-reclamation-description').value = description;
                });
            });

            // Handle modify reclamation
            const modifyModal = document.getElementById('modifyReclamationModal');
            const modifyForm = document.getElementById('modify-reclamation-form');
            const modifyTitleInput = document.getElementById('modify-reclamation-title');
            const modifyDescriptionInput = document.getElementById('modify-reclamation-description');
            const modifyErrorMessageDiv = document.getElementById('modify-form-error');
            const submitModifyButton = document.getElementById('submit-modify-reclamation');

            if (submitModifyButton && modifyForm) {
                modifyForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                });

                submitModifyButton.addEventListener('click', function() {
                    const title = modifyTitleInput.value.trim();
                    const description = modifyDescriptionInput.value.trim();

                    if (!title || !description) {
                        modifyErrorMessageDiv.textContent = 'Le titre et la description sont requis.';
                        modifyErrorMessageDiv.style.display = 'block';
                        return;
                    }

                    modifyErrorMessageDiv.style.display = 'none';
                    const formData = new FormData(modifyForm);

                    fetch(modifyForm.action, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const modalInstance = bootstrap.Modal.getInstance(modifyModal);
                            modalInstance.hide();
                            modifyForm.reset();
                            setTimeout(() => {
                                window.location.reload(); // Reload to reflect changes
                            }, 300);
                        } else {
                            modifyErrorMessageDiv.textContent = data.error || 'Une erreur est survenue.';
                            modifyErrorMessageDiv.style.display = 'block';
                        }
                    })
                    .catch(error => {
                        console.error('Error modifying reclamation:', error);
                        modifyErrorMessageDiv.textContent = 'Une erreur est survenue lors de la modification.';
                        modifyErrorMessageDiv.style.display = 'block';
                    });
                });
            }

            // Handle delete reclamation
            const deleteButtons = document.querySelectorAll('.delete-reclamation-btn');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    if (!confirm('Êtes-vous sûr de vouloir supprimer cette réclamation ?')) {
                        return;
                    }

                    const reclamationId = this.dataset.reclamationId;
                    const deleteUrl = '{{ path('app_reclamation_delete', {'id': 'REPLACEMENT_ID'}) }}'.replace('REPLACEMENT_ID', reclamationId);

                    fetch(deleteUrl, {
                        method: 'POST',
                        headers: {
                            'X-CSRF-Token': '{{ csrf_token('delete_reclamation') }}'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.reload(); // Reload to reflect changes
                        } else {
                            alert(data.error || 'Une erreur est survenue lors de la suppression.');
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting reclamation:', error);
                        alert('Une erreur est survenue lors de la suppression.');
                    });
                });
            });
        });
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        body.modal-open,
        body.modal-open .container,
        body.modal-open .modal,
        body.modal-open .modal-backdrop {
            animation: none !important;
            transition: none !important;
        }
                {# body.modal-open .modal{
                    opacity: 0 !important;
                                opacity: 1 !important;

                } #}


        .modal.in {
            display: block !important;
            opacity: 1 !important;
        }

        .modal-backdrop.in {
            opacity: 0.5 !important;
        }

        .slider-css-target {
            max-width: 800px;
            margin: 0 auto;
            overflow: hidden;
        }
    
        .slider-css-target ul {
            display: flex;
            gap: 10px;
            list-style: none;
            padding: 0;
            margin: 15px 0;
            overflow-x: auto;
        }
    
        .slider-css-target ul li {
            flex: 0 0 80px;
        }
    
        .slider-css-target ul li img {
            width: 100%;
            height: 60px;
            object-fit: cover;
            border: 2px solid transparent;
            transition: border-color 0.3s ease;
        }
    
        .slider-css-target ul li.active img {
            border-color: #337ab7;
        }
    
        .slider-css-target-images {
            display: flex;
            transition: transform 0.5s ease-in-out;
        }
    
        .slider-css-target-images .description {
            flex: 0 0 100%;
            min-width: 100%;
        }
    
        .slider-css-target-images img {
            width: 100%;
            height: 400px;
            object-fit: cover;
            border-radius: 8px;
        }
    
        #preview-slider:not(.visible) {
            display: none;
        }

        #travel-info {
            display: none;
            margin-top: 10px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }

        #travel-info p {
            margin: 5px 0;
            font-size: 16px;
        }

        #travel-info i {
            margin-right: 8px;
        }

        .error-message {
            color: #ff4444;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }

        .icon-button {
            display: inline-block;
            margin-right: 10px;
        }

        .icon-button a {
            display: flex;
            align-items: center;
            color: white;
            background-color: #333;
            padding: 10px 20px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 500;
            transition: background-color 0.3s;
        }

        .icon-button a i {
            margin-right: 8px;
        }

        .icon-button a:hover {
            background-color: #555;
        }

        .icon-button a[data-toggle="modal"] {
            background-color: transparent;
            color: #337ab7;
        }

        .icon-button a[data-toggle="modal"]:hover {
            text-decoration: underline;
            background-color: transparent;
        }

        #new-address {
            width: 100%;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        /* Custom styles for reclamations section */
        .reclamations-section {
            margin-top: 40px;
        }

        .reclamations-section h4 {
            margin-bottom: 20px;
        }

        .reclamations-section .card {
            height: 100%; /* Ensure cards are equal height in a row */
            display: flex;
            flex-direction: column;
        }

        .reclamations-section .card-header {
            font-size: 1.1rem;
            font-weight: bold;
        }

        .reclamations-section .card-body {
            flex-grow: 1; /* Allow body to expand */
        }

        .reclamations-section .card-body p {
            margin-bottom: 0.5rem;
        }

        .reclamations-section .card-footer {
            background-color: transparent;
            padding: 10px;
            margin-top: auto; /* Push footer to bottom */
        }

        .reclamations-section .card-en-cours .card-header {
            background-color: #ffc107; /* Bootstrap 5 warning */
            color: #fff;
        }

        .reclamations-section .card-traite .card-header {
            background-color: #28a745; /* Bootstrap 5 success */
            color: #fff;
        }

        .reclamations-section .card-refuse .card-header {
            background-color: #dc3545; /* Bootstrap 5 danger */
            color: #fff;
        }

        /* Ensure modals are styled correctly */
        .modal-content {
            border-radius: 0.5rem;
        }

        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 5px;
            display: none;
        }
    </style>
{% endblock %}

{% block body %}
<div class="section best-deal">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="section-heading">
                    <h6>Détails du logement</h6>
                    <br><br>
                    <h2>Trouve ta meilleure offre dès maintenant!</h2>
                    <h5>{{ logement.type }} - Détails</h5>
                </div>
            </div>

            <div class="col-lg-12">
                <div class="tabs-content">
                    <div class="row">
                        <!-- Left Column - Info Table -->
                        <div class="col-lg-4">
                            <div class="info-table">
                                <ul style="list-style: none; padding: 0; margin: 0;">
                                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span style="font-weight: 700; font-size: 14px; color: #666;">Nombre de pièces :</span>
                                        <span style="font-weight: 400; font-size: 16px;">{{ logement.nbrChambre }}</span>
                                    </li>
                                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span style="font-weight: 700; font-size: 14px; color: #666;">Type de propriété :</span>
                                        <span style="font-weight: 400; font-size: 16px;">{{ logement.type }}</span>
                                    </li>
                                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span style="font-weight: 700; font-size: 14px; color: #666;">Prix :</span>
                                        <span style="font-weight: 400; font-size: 16px;">{{ logement.prix }} DNT</span>
                                    </li>
                                    <li style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span style="font-weight: 700; font-size: 14px; color: #666;">Adresse:</span>
                                        <span style="font-weight: 400; font-size: 16px; line-height: 1.4; display: inline-block; width: 70%; margin-left:60px;">
                                            {% set address_parts = logement.adresse|split(',', 2) %}
                                            {{ address_parts[0] }}<br>
                                            {{ address_parts[1]|trim }}
                                        </span>
                                    </li>
                                    <li style="display: flex; justify-content: space-between;">
                                        <span style="font-weight: 700; font-size: 14px; color: #666;">Statut :</span>
                                        <span style="font-weight: 400; font-size: 16px;">{{ logement.statut.value }}</span>
                                    </li>
                                </ul>
                            </div>
                            <!-- New Address Input -->
                            <div class="mt-3">
                                <label for="new-address" style="font-weight: 700; font-size: 14px; color: #666;">Calculer la distance depuis :</label>
                                <input type="text" id="new-address" class="form-control" placeholder="Entrez une nouvelle adresse">
                                <div id="address-error" class="error-message"></div>
                                <div id="travel-info"></div>
                            </div>
                        </div>

                        <!-- Middle Column - Map -->
                        <div class="col-lg-5">
                            <div id="map" style="height: 400px; width: 100%; border-radius: 8px;"></div>
                        </div>

                        <!-- Right Column - Description and Actions -->
                        <div class="col-lg-3">
                            <h4>Description</h4>
                            <p>{{ logement.description }}</p>
                            <div class="icon-button mt-3">
                                <a href="{{ path('app_logement_edit', {'id': logement.id}) }}">
                                    <i class="fa fa-edit"></i> Modifier
                                </a>
                            </div>
                            <div class="icon-button mt-2">
                                <a href="#" onclick="event.preventDefault(); document.getElementById('delete-form').submit();">
                                    <i class="fa fa-trash"></i> Supprimer
                                </a>
                                <form id="delete-form" method="post" action="{{ path('app_logement_delete', {'id': logement.id}) }}" style="display: none;">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ logement.id) }}">
                                </form>
                                <a data-bs-toggle="modal" data-bs-target="#addReclamationModal" class="icon-button">
                                    <i class="fa fa-plus"></i> Ajouter Réclamation
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Images Carousel -->
                    <div class="row mt-4">
                        <div class="col-lg-12">
                            <div id="preview-slider" class="{{ logement.imageLogements|length > 0 ? 'visible' : '' }}">
                                <div class="slider-css-target">
                                    {% if logement.imageLogements|length > 0 %}
                                        <ul>
                                            {% for photo in logement.imageLogements %}
                                                <li>
                                                    <a href="#image_{{ loop.index }}">
                                                        <img src="{{ asset('Uploads/photos/' ~ photo.url) }}" 
                                                             alt="Thumbnail {{ loop.index }}" 
                                                             class="img-thumbnail">
                                                    </a>
                                                </li>
                                            {% endfor %}
                                        </ul>
                                        <div class="slider-css-target-images">
                                            {% for photo in logement.imageLogements %}
                                                <div class="description" id="image_{{ loop.index }}">
                                                    <img src="{{ asset('Uploads/photos/' ~ photo.url) }}" 
                                                         alt="Photo {{ loop.index }}" 
                                                         class="img-fluid">
                                                </div>
                                            {% endfor %}
                                        </div>
                                    {% else %}
                                        <div class="alert alert-info">Aucune photo disponible pour ce logement</div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Reclamations Section -->
 <div class="reclamations-section">
        <h4>Réclamations</h4>
        {% if logement.reclamations is not empty %}
            <div class="row row-cols-1 row-cols-md-3 g-4">
                {% for reclamation in logement.reclamations %}
                    {# Determine the card class based on statut #}
                    {% set cardClass = reclamation.statut | replace({' ': '-'}) %}
                    {% if reclamation.statut == 'en cours' %}
                        {% set cardClass = 'en-cours' %}
                    {% elseif reclamation.statut == 'traité' %}
                        {% set cardClass = 'traite' %}
                    {% elseif reclamation.statut == 'refusé' %}
                        {% set cardClass = 'refuse' %}
                    {% endif %}

                    <div class="col">
                        <div class="card card-{{ cardClass }} shadow-sm">
                            <div class="card-header">
                                {{ reclamation.titre }}
                            </div>
                            <div class="card-body">
                                <p><strong>{{ reclamation.statut|upper }}</strong></p>
                                <p>{{ reclamation.description }}</p>
                                <p>Créée le : {{ reclamation.timestamp|date('d/m/Y H:i') }}</p>
                                <p>Utilisateur : {{ reclamation.utilisateur.nom }} {{ reclamation.utilisateur.prenom }}</p>
                            </div>
                            <div class="card-footer">
                                {% if app.user and app.user == reclamation.utilisateur %}
                                    <button 
                                        class="btn btn-primary btn-sm modify-reclamation-btn"
                                        data-bs-toggle="modal"
                                        data-bs-target="#modifyReclamationModal"
                                        data-reclamation-id="{{ reclamation.id }}"
                                        data-title="{{ reclamation.titre }}"
                                        data-description="{{ reclamation.description }}"
                                        data-timestamp="{{ reclamation.timestamp|date('c') }}"
                                    >
                                        Modifier
                                    </button>
                                    <button 
                                        class="btn btn-danger btn-sm delete-reclamation-btn"
                                        data-reclamation-id="{{ reclamation.id }}"
                                    >
                                        Supprimer
                                    </button>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="alert alert-info">Aucune réclamation pour ce logement.</div>
        {% endif %}
    </div>

                </div>
            </div>
        </div>

               <button href="{{ path('app_logement_index') }}" ctype="button" class="btn btn-primary">Retour à la liste des logements</button>

        <!-- Include the Add Reclamation Modal -->
       <div class="modal fade" id="modifyReclamationModal" tabindex="-1" aria-labelledby="modifyReclamationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modifyReclamationModalLabel">Modifier une Réclamation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="modify-reclamation-form" action="" method="post">
                    <div class="mb-3">
                        <label for="modify-reclamation-title" class="form-label">Titre</label>
                        <input type="text" class="form-control" id="modify-reclamation-title" name="title" placeholder="Entrez le titre de la réclamation" required>
                    </div>
                    <div class="mb-3">
                        <label for="modify-reclamation-description" class="form-label">Description</label>
                        <textarea class="form-control" id="modify-reclamation-description" name="description" rows="3" placeholder="Décrivez votre réclamation" required></textarea>
                    </div>
                    <input type="hidden" name="statut" value="en cours">
                    <input type="hidden" name="_token" value="{{ csrf_token('modify_reclamation') }}">
                </form>
                <div id="modify-form-error" class="error-message"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="submit-modify-reclamation">Enregistrer</button>
            </div>
        </div>
    </div>
</div>

    <!-- Include the Add Reclamation Modal -->
    {% include 'reclamation/_add_reclamation_modal.html.twig' %}
{% endblock %}