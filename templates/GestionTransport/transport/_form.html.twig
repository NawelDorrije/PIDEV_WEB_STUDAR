<div class="container py-4" style="max-width: 1200px;">
    {# Flash messages #}
    {% for type, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ type == 'erreur' ? 'danger' : type == 'succès' ? 'success' : 'info' }} mb-4 p-3 rounded-0">
                {{ message }}
            </div>
        {% endfor %}
    {% endfor %}

    <div class="bg-white p-4 border mb-4">
        <h2 class="h5 fw-normal mb-4">
            {% if form.vars.data and form.vars.data.id %}
                Modifier le transport #{{ form.vars.data.id }}
            {% else %}
                Nouveau transport
            {% endif %}
        </h2>

        {{ form_start(form) }}
            <div class="mb-3">
                {{ form_label(form.reservation, 'Réservation', {'label_attr': {'class': 'form-label small'}}) }}
                {{ form_widget(form.reservation, {'attr': {'class': 'form-control rounded-0'}}) }}
                {{ form_errors(form.reservation) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.tempsArrivageDisplay, 'Heure d\'arrivée estimée', {'label_attr': {'class': 'form-label small'}}) }}
                {{ form_widget(form.tempsArrivageDisplay, {'attr': {'class': 'form-control rounded-0'}}) }}
                {{ form_errors(form.tempsArrivageDisplay) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.etudiantDisplay, 'Étudiant', {'label_attr': {'class': 'form-label small'}}) }}
                {{ form_widget(form.etudiantDisplay, {'attr': {'class': 'form-control rounded-0'}}) }}
                {{ form_errors(form.etudiantDisplay) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.voiture, 'Véhicule', {'label_attr': {'class': 'form-label small'}}) }}
                {{ form_widget(form.voiture, {'attr': {'class': 'form-control rounded-0'}}) }}
                {{ form_errors(form.voiture) }}
            </div>

            <div class="mb-3">
                {{ form_label(form.status, 'Statut', {'label_attr': {'class': 'form-label small'}}) }}
                {{ form_widget(form.status, {'attr': {'class': 'form-select rounded-0'}}) }}
                {{ form_errors(form.status) }}
            </div>

            {% if form.trajetEnKm is defined %}
                <div class="mb-3">
                    {{ form_label(form.trajetEnKm, 'Distance du trajet (km)', {'label_attr': {'class': 'form-label small'}}) }}
                    {{ form_widget(form.trajetEnKm, {'attr': {'class': 'form-control rounded-0'}}) }}
                    {{ form_errors(form.trajetEnKm) }}
                </div>
            {% endif %}

            {% if form.tarif is defined %}
                <div class="mb-3">
                    {{ form_label(form.tarif, 'Tarif (TND)', {'label_attr': {'class': 'form-label small'}}) }}
                    {{ form_widget(form.tarif, {'attr': {'class': 'form-control rounded-0'}}) }}
                    {{ form_errors(form.tarif) }}
                </div>
            {% endif %}

            {% if form.extraCost is defined %}
                <div class="mb-3">
                    {{ form_label(form.extraCost, 'Coût supplémentaire (TND)', {'label_attr': {'class': 'form-label small'}}) }}
                    {{ form_widget(form.extraCost, {'attr': {'class': 'form-control rounded-0'}}) }}
                    {{ form_errors(form.extraCost) }}
                </div>
            {% endif %}

            {# Replace the loading/unloading time sections #}
            {# Replace the status check condition #}
            {% if form.vars.data and form.vars.data.status is defined and form.vars.data.status and form.vars.data.status.value == 'Actif' %}
                {% if form.loadingTimeActual is defined %}
                    <div class="mb-3">
                        {{ form_label(form.loadingTimeActual, 'Temps de chargement réel', {'label_attr': {'class': 'form-label small'}}) }}
                        {{ form_widget(form.loadingTimeActual, {'attr': {'class': 'form-control rounded-0'}}) }}
                        {{ form_errors(form.loadingTimeActual) }}
                    </div>
                {% endif %}

                {% if form.loadingTimeAllowed is defined %}
                    <div class="mb-3">
                        {{ form_label(form.loadingTimeAllowed, 'Temps de chargement autorisé', {'label_attr': {'class': 'form-label small'}}) }}
                        {{ form_widget(form.loadingTimeAllowed, {'attr': {'class': 'form-control rounded-0'}}) }}
                        {{ form_errors(form.loadingTimeAllowed) }}
                    </div>
                {% endif %}

                {% if form.unloadingTimeActual is defined %}
                    <div class="mb-3">
                        {{ form_label(form.unloadingTimeActual, 'Temps de déchargement réel', {'label_attr': {'class': 'form-label small'}}) }}
                        {{ form_widget(form.unloadingTimeActual, {'attr': {'class': 'form-control rounded-0'}}) }}
                        {{ form_errors(form.unloadingTimeActual) }}
                    </div>
                {% endif %}

                {% if form.unloadingTimeAllowed is defined %}
                    <div class="mb-3">
                        {{ form_label(form.unloadingTimeAllowed, 'Temps de déchargement autorisé', {'label_attr': {'class': 'form-label small'}}) }}
                        {{ form_widget(form.unloadingTimeAllowed, {'attr': {'class': 'form-control rounded-0'}}) }}
                        {{ form_errors(form.unloadingTimeAllowed) }}
                    </div>
                {% endif %}
            {% endif %}

            <div class="d-flex justify-content-between mt-4">
                <a href="{{ path('app_transport_index') }}" class="btn btn-outline-dark rounded-0 px-4">
                    {{ form.vars.data and form.vars.data.id ? 'Annuler' : 'Retour' }}
                </a>
                <button type="submit" class="btn bg-orange text-white rounded-0 px-4">
                    {{ button_label|default(form.vars.data and form.vars.data.id ? 'Mettre à jour' : 'Enregistrer') }}
                </button>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    const reservationSelect = document.getElementById('{{ form.reservation.vars.id }}');
                    const arrivalDisplay = document.getElementById('{{ form.tempsArrivageDisplay.vars.id }}');
                    const etudiantDisplay = document.getElementById('{{ form.etudiantDisplay.vars.id }}');
                    
                    {% if form.extraCost is defined %}
                        const extraCostInput = document.getElementById('{{ form.extraCost.vars.id }}');
                    {% endif %}
                    
                    {% if form.loadingTimeActual is defined %}
                        const loadingTimeActual = document.getElementById('{{ form.loadingTimeActual.vars.id }}');
                    {% endif %}
                    {% if form.unloadingTimeActual is defined %}
                        const unloadingTimeActual = document.getElementById('{{ form.unloadingTimeActual.vars.id }}');
                    {% endif %}
                    
                    const loadingTimeAllowed = {{ form.vars.data.loadingTimeAllowed|default(0) }};
                    const unloadingTimeAllowed = {{ form.vars.data.unloadingTimeAllowed|default(0) }};
                    const costPerMinute = 0.5;

                    if (reservationSelect && arrivalDisplay && etudiantDisplay) {
                        if (reservationSelect.value) {
                            fetchReservationData(reservationSelect.value);
                        }

                        reservationSelect.addEventListener('change', function() {
                            arrivalDisplay.value = 'Chargement...';
                            etudiantDisplay.value = 'Chargement...';
                            if (this.value) {
                                fetchReservationData(this.value);
                            } else {
                                arrivalDisplay.value = '';
                                etudiantDisplay.value = '';
                            }
                        });

                        function fetchReservationData(reservationId) {
                            const url = "{{ path('api_reservation_arrival_time', {'id': 'PLACEHOLDER'}) }}".replace('PLACEHOLDER', reservationId);
                            fetch(url)
                                .then(response => {
                                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                                    return response.json();
                                })
                                .then(data => {
                                    arrivalDisplay.value = data.formatted || 'Non défini';
                                    etudiantDisplay.value = data.etudiant ? 
                                        `${data.etudiant.nom} ${data.etudiant.prenom}` : 
                                        'Aucun étudiant associé';
                                })
                                .catch(error => {
                                    arrivalDisplay.value = 'Erreur lors du chargement';
                                    etudiantDisplay.value = 'Erreur lors du chargement';
                                });
                        }
                    }
                 
                        function updateExtraCost() {
                            let totalExtraCost = 0;
                            
                            if (typeof loadingTimeActual !== 'undefined' && loadingTimeActual && 
                                loadingTimeActual.value > loadingTimeAllowed) {
                                const extraMinutes = loadingTimeActual.value - loadingTimeAllowed;
                                totalExtraCost += extraMinutes * costPerMinute;
                            }
                            
                            if (typeof unloadingTimeActual !== 'undefined' && unloadingTimeActual && 
                                unloadingTimeActual.value > unloadingTimeAllowed) {
                                const extraMinutes = unloadingTimeActual.value - unloadingTimeAllowed;
                                totalExtraCost += extraMinutes * costPerMinute;
                            }
                            
                            if (typeof extraCostInput !== 'undefined' && extraCostInput) {
                                extraCostInput.value = totalExtraCost.toFixed(2);
                            }
                        }

                        if (typeof loadingTimeActual !== 'undefined' && loadingTimeActual) {
                            loadingTimeActual.addEventListener('input', updateExtraCost);
                        }
                        if (typeof unloadingTimeActual !== 'undefined' && unloadingTimeActual) {
                            unloadingTimeActual.addEventListener('input', updateExtraCost);
                        }
                    });
                </script>
        {{ form_end(form) }}
    </div>

    <a href="{{ path('app_transport_home') }}" class="text-dark text-decoration-none small">
        ← Retour à l'accueil
    </a>
</div>