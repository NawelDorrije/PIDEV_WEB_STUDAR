{# templates/gestion_meubles/commande/liste.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Mes Commandes{% endblock %}

{% block body %}
<style>
/* Pop-up Styles - Ajout d'icônes et couleurs, sans image */
.popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 2000;
    animation: fadeIn 0.3s ease-in-out;
}

.popup-content {
    background: #fff;
    border-radius: 12px;
    padding: 2rem;
    max-width: 600px;
    width: 90%;
    max-height: 85vh;
    overflow-y: auto;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    position: relative;
    border-left: 4px solid #6366f1;
    transition: transform 0.3s ease;
    transform: scale(0.98);
}

.popup-overlay.active .popup-content {
    transform: scale(1);
}

.popup-content h2 {
    font-size: 1.8rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 1.5rem;
    text-align: left;
    position: relative;
}

.popup-content h2::after {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 0;
    width: 40px;
    height: 2px;
    background: #10b981;
}

.popup-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #6b7280;
    cursor: pointer;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.3s ease, background 0.3s ease;
}

.popup-close:hover {
    color: #1f2937;
    background: #e5e7eb;
}

.popup-details {
    font-size: 0.95rem;
    color: #4b5563;
}

.popup-details p {
    margin: 0.5rem 0;
    padding: 0.5rem 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
}

.popup-details p:last-child {
    border-bottom: none;
}

.popup-details i {
    font-size: 1.1rem;
    color: #6b7280;
}

.popup-details .id i { color: #6366f1; } /* Indigo pour ID */
.popup-details .date i { color: #3b82f6; } /* Bleu pour Date */
.popup-details .statut i { color: #ef4444; } /* Rouge pour Statut */
.popup-details .paiement i { color: #f59e0b; } /* Orange pour Paiement */
.popup-details .montant i { color: #10b981; } /* Vert pour Montant */
.popup-details .adresse i { color: #06b6d4; } /* Cyan pour Adresse */
.popup-details .items i { color: #8b5cf6; } /* Violet pour Articles */

.popup-details .montant span {
    color: #10b981;
    font-weight: 700;
}

.popup-details .statut span {
    background: #fef2f2;
    color: #ef4444;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.9rem;
    font-weight: 500;
}

.popup-details strong {
    color: #1f2937;
    font-weight: 600;
    flex: 0 0 35%;
}

.popup-details .popup-items {
    margin-top: 1rem;
}

.popup-details .popup-items h3 {
    font-size: 1.1rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 0.5rem;
}

.popup-details .popup-items .popup-item {
    margin: 0.5rem 0;
    padding: 0.5rem 0;
    border-bottom: 1px dashed #e5e7eb;
}

.popup-details .popup-items .popup-item:last-child {
    border-bottom: none;
}

.popup-details .popup-items .popup-item p {
    margin: 0.25rem 0;
    padding: 0;
    border: none;
}

.popup-actions {
    margin-top: 1rem;
    text-align: right;
}

.popup-actions .btn-print {
    background: #6366f1;
    color: #fff;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.3s ease;
}

.popup-actions .btn-print:hover {
    background: #4f46e5;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@media (max-width: 480px) {
    .popup-content {
        padding: 1.5rem;
        max-height: 90vh;
    }

    .popup-content h2 {
        font-size: 1.5rem;
    }

    .popup-details p {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .popup-details strong {
        flex: none;
    }
}
</style>

<div class="commandes-container">
    <h1>Mes Commandes</h1>

    {% for message in app.flashes('warning') %}
        <div class="alert-warning">
            {{ message }}
        </div>
    {% endfor %}

    <div class="filters-container">
        <input type="text" class="filter-input" id="filter-code" placeholder="Code commande">
        <input type="date" class="filter-input" id="filter-date">
        <select class="filter-select" id="filter-statut">
            <option value="">Tous les statuts</option>
            <option value="En attente">En attente</option>
            <option value="Payée">Payée</option>
            <option value="Livrée">Livrée</option>
            <option value="Annulée">Annulée</option>
        </select>
        <select class="filter-select" id="filter-paiement">
            <option value="">Méthode de paiement</option>
            <option value="Stripe">Stripe</option>
            <option value="Paiement à la livraison">Paiement à la livraison</option>
        </select>
        <input type="number" class="filter-input" id="filter-montant" placeholder="Montant min">
        <input type="text" class="filter-input" id="filter-adresse" placeholder="Adresse">
    </div>

    {% if commandes|length > 0 %}
        <div class="commandes-grid" id="commandes-body">
            {% for commande in commandes %}
                <div class="commande-card {{ commande.statut|lower == 'annulée' ? 'annulee' : '' }}" data-id="{{ commande.id }}">
                    <div class="commande-card-header">
                        <span class="commande-id">#{{ commande.id }}</span>
                        <span class="commande-date">{{ commande.dateCommande|date('d/m/Y H:i') }}</span>
                    </div>
                    <span class="commande-status {{ commande.statut|lower|replace({'é': 'e', '_': '-'}) }}">
                        {{ commande.statut|lower|replace({'_': ' '})|capitalize }}
                    </span>
                    <div class="commande-payment">
                        Paiement : {{ commande.methodePaiement|lower|replace({'_': ' '})|capitalize }}
                    </div>
                    <div class="commande-amount">
                        {{ commande.montantTotal|number_format(2, ',', ' ') }} TND
                    </div>
                    <div class="commande-address">
                        {{ commande.adresseLivraison|default('Non spécifiée') }}
                    </div>
                    <div class="commande-actions">
                        {% if commande.statut != 'ANNULEE' %}
                            <button class="btn-cancel" data-id="{{ commande.id }}">Annuler</button>
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <p>Aucune commande à afficher.</p>
    {% endif %}

    <p id="no-results" style="display: none;">Aucune commande ne correspond aux filtres.</p>

    <!-- Pop-up pour les détails -->
    <div class="popup-overlay" id="commande-popup">
        <div class="popup-content">
            <button class="popup-close">×</button>
            <h2>Détails de la commande</h2>
            <div class="popup-details" id="popup-details">
                <!-- Les détails seront injectés via JavaScript -->
            </div>
            <div class="popup-actions">
                <button class="btn-print" id="print-command">Imprimer</button>
            </div>
        </div>
    </div>

    <!-- Navigation Buttons -->
    <div class="nav-buttons">
        <a href="{{ path('app_gestion_meubles_mes_meubles') }}" class="nav-button" title="Consulter mes meubles">
            <i class="bi bi-list-ul"></i>
            <span class="nav-text">Mes meubles</span>
        </a>
        <a href="{{ path('app_gestion_meubles_a_acheter') }}" class="nav-button" title="Offres de meubles">
            <i class="bi bi-tag"></i>
            <span class="nav-text">Offre des meubles</span>
        </a>
        <a href="{{ path('app_gestion_meubles_lignes_panier') }}" class="nav-button" title="Voir mon panier">
            <i class="bi bi-cart3"></i>
            <span class="nav-text">Panier</span>
        </a>
        <a href="{{ path('app_gestion_meubles_meuble') }}" class="nav-button" title="Voir les statistiques">
            <i class="bi bi-bar-chart"></i>
            <span class="nav-text">Statistiques</span>
        </a>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const filters = {
                code: document.getElementById('filter-code'),
                date: document.getElementById('filter-date'),
                statut: document.getElementById('filter-statut'),
                paiement: document.getElementById('filter-paiement'),
                montant: document.getElementById('filter-montant'),
                adresse: document.getElementById('filter-adresse')
            };

            const cards = document.querySelectorAll('.commande-card');
            const noResultsMessage = document.getElementById('no-results');
            const popup = document.getElementById('commande-popup');
            const popupDetails = document.getElementById('popup-details');
            const popupClose = document.querySelector('.popup-close');
            const printButton = document.getElementById('print-command');

            // Données des commandes avec parcours des LignePanier
            const commandesData = {
                {% for commande in commandes %}
                    "{{ commande.id }}": {
                        id: "{{ commande.id }}",
                        date: "{{ commande.dateCommande|date('d/m/Y H:i') }}",
                        statut: "{{ commande.statut|lower|replace({'_': ' '})|capitalize }}",
                        paiement: "{{ commande.methodePaiement|lower|replace({'_': ' '})|capitalize }}",
                        montant: "{{ commande.montantTotal|number_format(2, ',', ' ') }} TND",
                        adresse: "{{ commande.adresseLivraison|default('Non spécifiée') }}",
                        items: [
                            {% for ligne in commande.panier.lignesPanier %}
                                {
                                    nom: "{{ ligne.meuble.nom|default('Meuble inconnu') }}",
                                    prix: "{{ ligne.meuble.prix|number_format(2, ',', ' ') }} TND",
                                    vendeur: "{{ ligne.meuble.vendeur.nom|default('Inconnu') }} {{ ligne.meuble.vendeur.prenom|default('') }} ({{ ligne.meuble.vendeur.cin|default('N/A') }})"
                                }{% if not loop.last %},{% endif %}
                            {% else %}
                                { nom: "Aucun article", prix: "0,00 TND", vendeur: "N/A" }
                            {% endfor %}
                        ]
                    }{% if not loop.last %},{% endif %}
                {% endfor %}
            };

            // Filtrer les cartes
            Object.values(filters).forEach(filter => {
                filter.addEventListener('input', applyFilters);
            });

            function applyFilters() {
                let visibleCards = 0;
                cards.forEach(card => {
                    const id = card.querySelector('.commande-id').textContent.replace('#', '');
                    const date = card.querySelector('.commande-date').textContent;
                    const statut = card.querySelector('.commande-status').textContent;
                    const paiement = card.querySelector('.commande-payment').textContent.replace('Paiement : ', '');
                    const montant = parseFloat(card.querySelector('.commande-amount').textContent.replace(/[^\d,]/g, '').replace(',', '.'));
                    const adresse = card.querySelector('.commande-address').textContent;

                    const show = (!filters.code.value || id.includes(filters.code.value)) &&
                        (!filters.date.value || date.includes(filters.date.value)) &&
                        (!filters.statut.value || statut.toLowerCase().includes(filters.statut.value.toLowerCase())) &&
                        (!filters.paiement.value || paiement.toLowerCase().includes(filters.paiement.value.toLowerCase())) &&
                        (!filters.montant.value || montant >= parseFloat(filters.montant.value)) &&
                        (!filters.adresse.value || adresse.toLowerCase().includes(filters.adresse.value.toLowerCase()));

                    card.style.display = show ? '' : 'none';
                    if (show) visibleCards++;
                });
                noResultsMessage.style.display = visibleCards === 0 ? 'block' : 'none';
            }

            // Afficher la pop-up au clic sur une carte
            cards.forEach(card => {
                card.addEventListener('click', (e) => {
                    if (e.target.classList.contains('btn-cancel')) return;
                    const commandeId = card.getAttribute('data-id');
                    const commande = commandesData[commandeId];
                    if (commande) {
                        popupDetails.innerHTML = `
                            <p class="id"><i class="bi bi-hash"></i> <strong>Commande #:</strong> <span>${commande.id}</span></p>
                            <p class="date"><i class="bi bi-calendar"></i> <strong>Date:</strong> <span>${commande.date}</span></p>
                            <p class="statut"><i class="bi bi-check-circle"></i> <strong>Statut:</strong> <span>${commande.statut}</span></p>
                            <p class="paiement"><i class="bi bi-credit-card"></i> <strong>Méthode de paiement:</strong> <span>${commande.paiement}</span></p>
                            <p class="montant"><i class="bi bi-currency-dollar"></i> <strong>Montant total:</strong> <span>${commande.montant}</span></p>
                            <p class="adresse"><i class="bi bi-geo-alt"></i> <strong>Adresse de livraison:</strong> <span>${commande.adresse}</span></p>
                            <p class="items"><i class="bi bi-box-seam"></i> <strong>Articles (${commande.items.length}):</strong></p>
                            <div class="popup-items">
                                ${commande.items.map(item => `
                                    <div class="popup-item">
                                        <p><strong>Meuble:</strong> ${item.nom}</p>
                                        <p><strong>Prix:</strong> ${item.prix}</p>
                                        <p><strong>Vendeur:</strong> ${item.vendeur}</p>
                                    </div>
                                `).join('')}
                            </div>
                        `;
                        popup.style.display = 'flex';
                        popup.classList.add('active');
                    }
                });
            });

            // Fermer la pop-up
            popupClose.addEventListener('click', () => {
                popup.style.display = 'none';
                popup.classList.remove('active');
            });

            // Imprimer la commande
            printButton.addEventListener('click', () => {
                const printContent = popupDetails.innerHTML;
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`
                    <html>
                        <head>
                            <title>Commande #${popupDetails.querySelector('.id span').textContent}</title>
                            <style>
                                body { font-family: 'Inter', sans-serif; padding: 20px; }
                                h3 { margin-top: 20px; color: #1a1a1a; font-weight: 600; }
                                .popup-item { margin: 10px 0; padding: 10px; border-bottom: 1px dashed #e2e8f0; }
                                strong { color: #1a1a1a; }
                                i { display: none; } /* Masquer les icônes lors de l'impression */
                            </style>
                        </head>
                        <body>
                            ${printContent}
                        </body>
                    </html>
                `);
                printWindow.document.close();
                printWindow.print();
            });

            // Fermer la pop-up en cliquant à l'extérieur
            popup.addEventListener('click', (e) => {
                if (e.target === popup) {
                    popup.style.display = 'none';
                    popup.classList.remove('active');
                }
            });
        });
    </script>
{% endblock %}