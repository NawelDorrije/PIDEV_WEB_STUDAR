{% extends 'base.html.twig' %}

{% block title %}Rendez-vous Admin Dashboard{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    /* General Styles */
    .dashboard-container {
        max-width: 1400px;
        margin: 3rem auto;
        padding: 0 1.5rem;
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #f0f4ff 0%, #ffffff 100%);
        min-height: 100vh;
    }

    h1 {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1e293b;
        text-align: center;
        background: linear-gradient(to right, #4f46e5, #3b82f6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1rem;
    }

    .subtitle {
        font-size: 1rem;
        color: #64748b;
        text-align: center;
        margin-bottom: 2rem;
    }

    /* Section Styles */
    .dashboard-section {
        background: #ffffff;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2.5rem;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .dashboard-section:hover {
        transform: translateY(-5px);
    }

    .dashboard-section h2 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .dashboard-section h2 i {
        color: #4f46e5;
        font-size: 1.2rem;
    }

    /* Filters and Actions */
    .filters-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1.5rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
        background: #f8fafc;
        padding: 1rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-select, .action-btn {
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 0.95rem;
        color: #1e293b;
        background: #fff;
        transition: all 0.3s ease;
    }

    .filter-select {
        width: 220px;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 1.2rem;
    }

    .filter-select:focus, .action-btn:hover {
        outline: none;
        border-color: #4f46e5;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
    }

    .action-btn {
        background: linear-gradient(135deg, #4f46e5, #3b82f6);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        position: relative;
        overflow: hidden;
    }

    .action-btn:hover {
        background: linear-gradient(135deg, #3b82f6, #4f46e5);
        transform: translateY(-2px);
    }

    .action-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.2);
        transition: left 0.3s ease;
    }

    .action-btn:hover::before {
        left: 100%;
    }

    /* Table Styles */
    .rendezvous-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background: #ffffff;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    }

    .rendezvous-table th, .rendezvous-table td {
        padding: 1rem;
        text-align: left;
        font-size: 0.95rem;
        color: #1e293b;
    }

    .rendezvous-table th {
        background: linear-gradient(135deg, #4f46e5, #3b82f6);
        color: white;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        cursor: pointer;
        position: relative;
    }

    .rendezvous-table th:hover {
        background: linear-gradient(135deg, #3b82f6, #4f46e5);
    }

    .rendezvous-table th::after {
        content: '↕';
        position: absolute;
        right: 10px;
        opacity: 0.5;
    }

    .rendezvous-table th.asc::after { content: '↑'; opacity: 1; }
    .rendezvous-table th.desc::after { content: '↓'; opacity: 1; }

    .rendezvous-table td {
        border-bottom: 1px solid #e2e8f0;
        transition: background 0.3s ease;
    }

    .rendezvous-table tr:hover td {
        background: #f8fafc;
    }

    .badge {
        font-size: 0.8rem;
        padding: 6px 12px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
    }

    .badge-success { background: #10b981; color: white; }
    .badge-warning { background: #f97316; color: white; }
    .badge-danger { background: #ef4444; color: white; }

    .action-icons i {
        margin-right: 10px;
        color: #4f46e5;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .action-icons i:hover {
        color: #3b82f6;
    }

    /* Calendar */
    .calendar-container {
        background: #fff;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
    }

    .fc-daygrid-day-number {
        font-size: 1rem;
        color: #1e293b;
    }

    .fc-event {
        border: none !important;
        color: #fff !important;
        font-size: 0.9rem;
        padding: 4px 8px;
        border-radius: 6px;
        background: #4f46e5 !important;
        transition: background 0.3s ease;
    }

    .fc-event:hover {
        background: #3b82f6 !important;
    }

    /* Animations */
    .rendezvous-table tr {
        animation: fadeInUp 0.6s ease-out;
        animation-delay: calc(var(--index) * 0.1s);
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive */
    @media (max-width: 1024px) {
        .filters-container {
            flex-direction: column;
            align-items: stretch;
        }

        .filter-select, .action-btn {
            width: 100%;
        }

        .rendezvous-table {
            font-size: 0.9rem;
        }
    }

    @media (max-width: 768px) {
        .dashboard-container {
            padding: 0 1rem;
        }

        h1 {
            font-size: 2rem;
        }

        .dashboard-section h2 {
            font-size: 1.3rem;
        }

        .rendezvous-table {
            display: block;
            overflow-x: auto;
        }

        .rendezvous-table th, .rendezvous-table td {
            min-width: 120px;
        }
    }

    @media (max-width: 480px) {
        .rendezvous-table th, .rendezvous-table td {
            padding: 0.75rem;
            font-size: 0.85rem;
        }

        .action-btn {
            padding: 0.5rem 1rem;
        }
    }
</style>
{% endblock %}

{% block body %}
<div class="dashboard-container">
    <h1>Rendez-vous Admin Dashboard</h1>
    <p class="subtitle">Gérez et analysez vos rendez-vous en temps réel</p>

    <!-- Filters and Actions Section -->
    <div class="dashboard-section">
        <h2><i class="fas fa-filter"></i> Filtres & Actions</h2>
        <div class="filters-container">
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <select class="filter-select" id="filtre-statut" onchange="applyFilters()">
                    <option value="">Tous les statuts</option>
                    <option value="confirmée" {% if app.request.query.get('status') == 'confirmée' %}selected{% endif %}>Confirmés</option>
                    <option value="en_attente" {% if app.request.query.get('status') == 'en_attente' %}selected{% endif %}>En attente</option>
                    <option value="refusée" {% if app.request.query.get('status') == 'refusée' %}selected{% endif %}>Refusés</option>
                </select>
                <select class="filter-select" id="filtre-periode" onchange="applyFilters()">
                    <option value="all">Toutes périodes</option>
                    <option value="month" {% if app.request.query.get('periode') == 'month' %}selected{% endif %}>Mois courant</option>
                    <option value="year" {% if app.request.query.get('periode') == 'year' %}selected{% endif %}>Année courante</option>
                </select>
            </div>
            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                <button class="action-btn" onclick="exportToCSV()"><i class="fas fa-download"></i> Exporter CSV</button>
            </div>
        </div>
    </div>

    <!-- Rendez-vous Table Section -->
    <div class="dashboard-section">
        <h2><i class="fas fa-table"></i> Liste des Rendez-vous</h2>
        {% if rendezvouses|length > 0 %}
        <table class="rendezvous-table">
            <thead>
                <tr>
                    <th data-sort="date">Date</th>
                    <th data-sort="heure">Heure</th>
                    <th data-sort="logement">Logement</th>
                    <th data-sort="status">Statut</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for rendezvou in rendezvouses %}
                <tr style="--index: {{ loop.index0 }}">
                    <td>{{ rendezvou.date|date('d/m/Y') }}</td>
                    <td>{{ rendezvou.heure|date('H:i') }}</td>
                    <td>
                        {% if rendezvou.idLogement is iterable %}
                            {{ rendezvou.idLogement.adresse ?? rendezvou.idLogement.id }}
                        {% else %}
                            {% set logement = logement_repo.find(rendezvou.idLogement) %}
                            {{ logement ? logement.adresse : rendezvou.idLogement }}
                        {% endif %}
                    </td>
                    <td>
                        <span class="badge badge-{{ 
                            rendezvou.status == 'confirmée' ? 'success' : 
                            (rendezvou.status == 'en_attente' ? 'warning' : 'danger') }}"
                            onclick="toggleStatus({{ rendezvou.id }}, this)">
                            {{ rendezvou.status }}
                        </span>
                    </td>
                    <td class="action-icons">
                        <a href="{{ path('app_rendezvous_show_ADMIN', {'id': rendezvou.id}) }}" title="Voir détails">
                            <i class="fas fa-eye"></i>
                        </a>
                        
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
        {% else %}
        <div class="alert alert-info">
            <i class="fas fa-info-circle mr-2"></i>Aucun rendez-vous trouvé.
        </div>
        {% endif %}
    </div>

    <!-- Calendar Section -->
    <div class="dashboard-section calendar-container">
        <h2><i class="far fa-calendar-alt"></i> Calendrier des Rendez-vous</h2>
        <div id="calendar"></div>
    </div>
</div>

{% block javascripts %}
    {{ parent() }}
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.9/index.global.min.js'></script>
        <script src="https://cdn.sheetjs.com/xlsx-0.19.3/package/dist/xlsx.full.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize FullCalendar
            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'fr',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,dayGridWeek'
                },
                events: [
                    {% for rendezvou in rendezvouses %}
                    {
                        title: 'RDV - {{ rendezvou.status }}',
                        start: '{{ rendezvou.date|date('Y-m-d') }}T{{ rendezvou.heure }}',
                        color: '{{ rendezvou.status == "confirmée" ? "#10b981" : (rendezvou.status == "en_attente" ? "#f97316" : "#ef4444") }}',
                        extendedProps: {
                            status: '{{ rendezvou.status }}',
                            heure: '{{ rendezvou.heure }}',
                            logement: '{{ rendezvou.idLogement is iterable ? (rendezvou.idLogement.adresse ?? "Logement #" ~ rendezvou.idLogement.id) : rendezvou.idLogement }}'
                        }
                    },
                    {% endfor %}
                ],
                eventDidMount: function(info) {
                    info.el.setAttribute('title', 
                        `Heure: ${info.event.extendedProps.heure}\n` +
                        `Logement: ${info.event.extendedProps.logement}\n` +
                        `Statut: ${info.event.extendedProps.status}`
                    );
                },
                eventClick: function(info) {
                    alert(`Rendez-vous: ${info.event.title}\nHeure: ${info.event.extendedProps.heure}\nLogement: ${info.event.extendedProps.logement}`);
                }
            });
            calendar.render();

            // Apply Filters
            window.applyFilters = function() {
                const statut = document.getElementById('filtre-statut').value;
                const periode = document.getElementById('filtre-periode').value;
                window.location.href = '{{ path('app_rendezvous_index_ADMIN') }}?status=' + encodeURIComponent(statut) + '&periode=' + encodeURIComponent(periode);
            };

            // Table Sorting
            const headers = document.querySelectorAll('.rendezvous-table th[data-sort]');
            headers.forEach(header => {
                header.addEventListener('click', () => {
                    const sortKey = header.dataset.sort;
                    const isAsc = !header.classList.contains('asc');
                    headers.forEach(h => h.classList.remove('asc', 'desc'));
                    header.classList.add(isAsc ? 'asc' : 'desc');

                    const rows = Array.from(document.querySelectorAll('.rendezvous-table tbody tr'));
                    rows.sort((a, b) => {
                        let aValue = a.querySelector(`td:nth-child(${Array.from(headers).indexOf(header) + 1})`).textContent.trim();
                        let bValue = b.querySelector(`td:nth-child(${Array.from(headers).indexOf(header) + 1})`).textContent.trim();
                        
                        if (sortKey === 'date') {
                            aValue = new Date(aValue.split('/').reverse().join('-'));
                            bValue = new Date(bValue.split('/').reverse().join('-'));
                        } else if (sortKey === 'heure') {
                            aValue = aValue.replace(':', '');
                            bValue = bValue.replace(':', '');
                        }
                        
                        return isAsc ? 
                            (aValue > bValue ? 1 : -1) : 
                            (aValue < bValue ? 1 : -1);
                    });

                    const tbody = document.querySelector('.rendezvous-table tbody');
                    tbody.innerHTML = '';
                    rows.forEach(row => tbody.appendChild(row));
                });
            });

            // Export to CSV
             window.exportToCSV = function() {
                // Renommer la fonction pour garder la compatibilité
                const rows = document.querySelectorAll('.rendezvous-table tr');
                const data = [];
                
                // Ajouter les en-têtes
                const headers = [];
                document.querySelectorAll('.rendezvous-table th').forEach(header => {
                    headers.push(header.textContent.trim());
                });
                data.push(headers);
                
                // Ajouter les données
                rows.forEach((row, rowIndex) => {
                    if (rowIndex === 0) return; // Sauter la ligne d'en-tête
                    
                    const rowData = [];
                    const cols = row.querySelectorAll('td');
                    
                    cols.forEach((col, colIndex) => {
                        if (colIndex < 4) { // Seulement les 4 premières colonnes
                            rowData.push(col.textContent.trim());
                        }
                    });
                    
                    data.push(rowData);
                });
                
                // Créer un classeur Excel
                const wb = XLSX.utils.book_new();
                const ws = XLSX.utils.aoa_to_sheet(data);
                XLSX.utils.book_append_sheet(wb, ws, "Rendez-vous");
                
                // Générer le fichier Excel
                XLSX.writeFile(wb, 'rendezvous_export_' + new Date().toISOString().slice(0, 10) + '.xlsx');
            };

            // Toggle Status
            window.toggleStatus = function(id, element) {
                const statuses = ['confirmée', 'en_attente', 'refusée'];
                const currentStatus = element.textContent.trim();
                const nextStatus = statuses[(statuses.indexOf(currentStatus) + 1) % statuses.length];
                
                // Simulate API call
                fetch('/api/rendezvous/' + id + '/status', {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: nextStatus })
                })
                .then(response => {
                    if (response.ok) {
                        element.textContent = nextStatus;
                        element.className = 'badge badge-' + (
                            nextStatus === 'confirmée' ? 'success' :
                            nextStatus === 'en_attente' ? 'warning' : 'danger'
                        );
                        calendar.refetchEvents();
                    } else {
                        alert('Erreur lors de la mise à jour du statut');
                    }
                })
                .catch(() => alert('Erreur réseau'));
            };

            // Inline Editing (Placeholder)
            window.editRow = function(id) {
                alert('Fonctionnalité d\'édition inline en cours de développement pour RDV #' + id);
                // Implement inline editing logic here
            };

            // Delete Row (Placeholder)
            window.deleteRow = function(id) {
                if (confirm('Voulez-vous vraiment supprimer ce rendez-vous ?')) {
                    // Simulate API call
                    fetch('/api/rendezvous/' + id, {
                        method: 'DELETE'
                    })
                    .then(response => {
                        if (response.ok) {
                            document.querySelector(`tr[data-id="${id}"]`).remove();
                            calendar.refetchEvents();
                        } else {
                            alert('Erreur lors de la suppression');
                        }
                    })
                    .catch(() => alert('Erreur réseau'));
                }
            };
        });
    </script>
{% endblock %}
</div>
{% endblock %}